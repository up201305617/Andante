class MaquinaAndante
types

	public SacoDinheiro = Dinheiro`BagOfCoins;
	public Status = <OnFactory> | <OnMaintenance> | <Idle> | <EnteringCoins> | <Delivering>;
	public Password = seq of char;

instance variables

	public quantidadeCartoes: nat := 0;
	public quantidadeRecibo: nat := 0;
	public stockDinheiro: SacoDinheiro := {|->};

	public quantiaInserida: nat := 0;
	public troco : SacoDinheiro := {|->}; 
	public status : Status := <OnFactory>; 
	public andante : [CartaoAndante] := nil;
	public recibo : [Recibo] := nil;
	public codigo : Password := []; 
	
	public z2: Zona := new Zona("z2",120);
	public z3: Zona := new Zona("z3",155);
	public z4: Zona := new Zona("z4",195);
	public z5: Zona := new Zona("z5",235);
	public z6: Zona := new Zona("z6",275);
	public z7: Zona := new Zona("z7",315);
	public z8: Zona := new Zona("z8",355);
	public z9: Zona := new Zona("z9",395);
	public z10: Zona := new Zona("z10",435);
	public z11: Zona := new Zona("z11",475);
	public z12: Zona := new Zona("z12",515);
	
operations
	------------------------------------------------------------------------
	--Operações Fábrica
	------------------------------------------------------------------------
	public MaquinaAndante: () ==> MaquinaAndante
		MaquinaAndante() == 
			return self;
	
	public definirPassword: Password ==> ()
	definirPassword(code) ==
		codigo := code
	pre status = <OnFactory>;
	
	public sairFabrica: () ==> ()
	sairFabrica() ==
		status := <Idle>
	pre status = <OnFactory>;
	------------------------------------------------------------------------
	
	------------------------------------------------------------------------
	--Operações Manutenção
	------------------------------------------------------------------------
	public abrirMaquina: Password ==> ()
	abrirMaquina(code) ==
		if code = codigo then 
			status := <OnMaintenance>
	pre status = <Idle>;
	
	public carregarMaquina: SacoDinheiro * nat1 * nat1 ==> () 
	carregarMaquina(coins,cartoes,papel) == (
		stockDinheiro := coins;
		quantidadeCartoes := cartoes;
		quantidadeRecibo := papel
	)
	pre status = <OnMaintenance>; 
	
	public fecharMaquina: () ==> ()
	fecharMaquina() ==
		status := <Idle>
	pre status = <OnMaintenance>;
	------------------------------------------------------------------------
	
	------------------------------------------------------------------------
	--Operações Comprador
	------------------------------------------------------------------------
	public mudarZona: Zona * CartaoAndante ==> ()
		mudarZona(z,c) == (
			c.mudarZona(z);
		)
		pre status = <Idle>
		post quantidadeCartoes = quantidadeCartoes~;
	
	public inserirDinheiro: Dinheiro`Coin ==> () 
	inserirDinheiro(coin) == 
		atomic (
			stockDinheiro := Dinheiro`add(coin, stockDinheiro);
			quantiaInserida :=  quantiaInserida + coin;
			status := <EnteringCoins>
		)
	pre status in set {<Idle>, <EnteringCoins>}; 
	
	public apanharTroco: () ==> SacoDinheiro 
	apanharTroco() ==
		let r = troco in (
			atomic( 
				troco := {|->};
				status := if andante = nil then <Idle> else <Delivering>
			);
			return r
		)
	pre troco <> {|->};
	
	public apanharAndante: () ==> CartaoAndante 
	apanharAndante() == (
		let r = andante in (
			atomic( 
				andante := nil;
				status := if andante = nil then <Idle> else <Delivering>
			);
			return r
		)
	)
	pre andante <> nil;
	
	public apanharRecibo: () ==> Recibo 
	apanharRecibo() == (
		let r = recibo in (
			atomic( 
				recibo := nil;
				status := if recibo = nil then <Idle> else <Delivering>
			);
			return r
		)
	)
	pre recibo <> nil;
	
	public cancelar: () ==> ()
  cancelar() ==
		let chg = Dinheiro`extract(stockDinheiro, quantiaInserida) in 
			atomic (
				stockDinheiro := Dinheiro`removeAll(chg, stockDinheiro);
				quantiaInserida := 0;
				troco := chg;
				status := <Delivering>
			)
	pre status = <EnteringCoins>;  
	
	public comprarAndante: nat1 * Zona * bool ==> ()
	comprarAndante(q, z, r) == 
		let cartao = new CartaoAndante(q,z),
		preco = cartao.calcularPreco() + 60,
		chg = Dinheiro`extract(stockDinheiro, quantiaInserida - preco) in (
		  		atomic (
						stockDinheiro := Dinheiro`removeAll(chg, stockDinheiro);
						quantidadeCartoes := quantidadeCartoes - 1;
						quantiaInserida := 0;
						troco := chg; 
						andante := cartao;
						status := <Delivering>
				);
				
				if r then 
				(
					quantidadeRecibo := quantidadeRecibo - 1;
					recibo := new Recibo(q,z,"Compra");
				)
	)
	pre status = <EnteringCoins>  
	    and quantidadeCartoes > 0
			and quantiaInserida >= z.preco * q
			and quantidadeRecibo > 0
	    and Dinheiro`canExtract(stockDinheiro, quantiaInserida - z.preco * q);
	    
	public carregarAndante: nat * CartaoAndante * bool ==> ()
	carregarAndante(q, c, r) ==(
		c.carregarAndante(q);
		let preco = c.zona.preco * q,
		chg = Dinheiro`extract(stockDinheiro, quantiaInserida - preco) in (
		  		atomic (
						stockDinheiro := Dinheiro`removeAll(chg, stockDinheiro);
						quantiaInserida := 0;
						troco := chg; 
						andante := c;
						status := <Delivering>
				);
				
				if r then 
				(
					quantidadeRecibo := quantidadeRecibo - 1;
					recibo := new Recibo(q,c.zona,"Carregamento");
				)
				
	))
	pre status = <EnteringCoins>  
			and quantiaInserida >= c.zona.preco * q
			and quantidadeRecibo > 0
	    and Dinheiro`canExtract(stockDinheiro, quantiaInserida - c.zona.preco * q);
	    
	public reset: () ==> ()
	reset() ==
		status := <Idle>
	
		
end MaquinaAndante

--TODO
--criar classes de teste