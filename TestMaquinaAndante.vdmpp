class TestMaquinaAndante is subclass of MyTestCase

-- Esta classe serve para testar os distintos comportamentos da
-- maquina Andante em distintos cenarios.

operations
	
	-- Testa a configuracao da maquina Andante pelo seu fabricante
	public ConfigurarMaquina: MaquinaAndante`Password ==> MaquinaAndante
	ConfigurarMaquina(codigo) == (
		dcl ma: MaquinaAndante := new MaquinaAndante();
		ma.definirPassword(codigo);
		ma.sairFabrica(); 
		return ma;
	)
	post RESULT.codigo = codigo
	and RESULT.stockDinheiro = {|->} 
	and RESULT.status = <Idle>
	and RESULT.quantidadeCartoes = 0
	and RESULT.quantidadeRecibo = 0;
	
	-- Testa o abastecimento de stock da maquina Andante
	public CarregarMaquina: MaquinaAndante * MaquinaAndante`Password * Dinheiro`BagOfCoins * nat1 * nat1 ==> ()
	CarregarMaquina(maq, code, saco, qc, qr) == (
		dcl quantidadeInicialCartao : nat := maq.quantidadeCartoes;
		dcl quantidadeInicialPapel : nat := maq.quantidadeRecibo;
		maq.abrirMaquina(code);
		maq.carregarMaquina(saco, qc, qr);
		maq.fecharMaquina();
		assertTrue(maq.quantidadeCartoes = quantidadeInicialCartao + qc);
		assertTrue(maq.quantidadeRecibo = quantidadeInicialPapel + qr);
	)
	pre maq.status = <Idle> 
  	and code = maq.codigo
  post maq.status = <Idle>
  	and maq.stockDinheiro = saco;
  
  -- Testa a compra de um novo titulo Andante
  public ComprarAndanteRecibo: MaquinaAndante * Zona * nat1 * Dinheiro`BagOfCoins ==> CartaoAndante * Dinheiro`BagOfCoins * Recibo
  ComprarAndanteRecibo(maq,zon,qua,inserido) == (
  	dcl quantidadeInicialCartao : nat := maq.quantidadeCartoes;
		dcl quantidadeInicialPapel : nat := maq.quantidadeRecibo;
		dcl stockInicialDinheiro : Dinheiro`BagOfCoins := maq.stockDinheiro; 
		dcl dinheiroInserido: nat := 0;
		dcl troco : Dinheiro`BagOfCoins := {|->};
		dcl cartao : [CartaoAndante] := nil;
		dcl recibo : [Recibo] := nil;
		dcl result : CartaoAndante * Dinheiro`BagOfCoins * Recibo;
		
		for all c in set dom inserido do
			for all - in set {1 , ..., inserido(c)} do (
				maq.inserirDinheiro(c);
				dinheiroInserido := dinheiroInserido + c;
				assertEqual(dinheiroInserido, maq.quantiaInserida)
      );      
		
		maq.comprarAndante(qua,zon,true);
	 	
  	if Dinheiro`sum(inserido) > zon.preco*qua then 
  	  	troco := maq.apanharTroco();
    
    cartao := maq.apanharAndante();
		recibo := maq.apanharRecibo();
  	result := mk_(cartao, troco,recibo);
    
		assertTrue(maq.quantidadeCartoes = quantidadeInicialCartao -1);
		assertTrue(maq.quantidadeRecibo = quantidadeInicialPapel -1);
		assertTrue(Dinheiro`addAll(maq.stockDinheiro, troco) = Dinheiro`addAll(stockInicialDinheiro, inserido));
		return result;
  )
  pre maq.status = <Idle> 
  	and Dinheiro`sum(inserido) >= zon.preco * qua
  	and maq.quantidadeCartoes > 0
  	and maq.quantidadeRecibo > 0
  	and Dinheiro`canExtract(Dinheiro`addAll(maq.stockDinheiro, inserido), Dinheiro`sum(inserido) - (zon.preco * qua)) 
  post let mk_(cartao, troco, recibo) = RESULT in (
		  cartao.zona = zon 
		  and cartao.zona.preco * cartao.quantidade = zon.preco * qua
		  and recibo.zona = zon
		  and recibo.quantidade = qua
		  and recibo.operacao = "Compra"
		  and Dinheiro`sum(troco) = Dinheiro`sum(inserido) - (zon.preco * qua + 60)
		  and maq.status = <Delivering> 
	);
	
	-- Testa o carregamento de um titulo Andante
	public CarregarAndanteRecibo: MaquinaAndante * nat1 * Dinheiro`BagOfCoins * CartaoAndante ==> CartaoAndante * Dinheiro`BagOfCoins * Recibo
  CarregarAndanteRecibo(maq,qua,inserido,car) == (
		dcl quantidadeInicialPapel : nat := maq.quantidadeRecibo;
		dcl stockInicialDinheiro : Dinheiro`BagOfCoins := maq.stockDinheiro; 
		dcl dinheiroInserido: nat := 0;
		dcl troco : Dinheiro`BagOfCoins := {|->};
		dcl quantidadeInicial : nat := car.quantidade;
		dcl cartaoNovo : [CartaoAndante] := car;
		dcl recibo : [Recibo] := nil;
		dcl result : CartaoAndante * Dinheiro`BagOfCoins * Recibo;
		
		for all c in set dom inserido do
			for all - in set {1 , ..., inserido(c)} do (
				maq.inserirDinheiro(c);
				dinheiroInserido := dinheiroInserido + c;
				assertEqual(dinheiroInserido, maq.quantiaInserida)
      );      
		
		maq.carregarAndante(qua,cartaoNovo,true);
	 	
  	if Dinheiro`sum(inserido) > cartaoNovo.zona.preco * qua then 
  	  	troco := maq.apanharTroco();
    
    cartaoNovo := maq.apanharAndante();
		recibo := maq.apanharRecibo();
  	result := mk_(cartaoNovo, troco,recibo);
    
		assertTrue(maq.quantidadeRecibo = quantidadeInicialPapel -1);
		assertTrue(Dinheiro`addAll(maq.stockDinheiro, troco) = Dinheiro`addAll(stockInicialDinheiro, inserido));
		assertTrue(cartaoNovo.quantidade = quantidadeInicial +qua);
		return result;
  )
  pre maq.status = <Idle> 
  	and Dinheiro`sum(inserido) >= car.zona.preco * qua
  	and maq.quantidadeCartoes > 0
  	and maq.quantidadeRecibo > 0
  	and Dinheiro`canExtract(Dinheiro`addAll(maq.stockDinheiro, inserido), Dinheiro`sum(inserido) - (car.zona.preco * qua)) 
  post let mk_(cartao, troco, recibo) = RESULT in (
		  recibo.zona = car.zona
		  and recibo.quantidade = qua
		  and recibo.operacao = "Carregamento"
		  and Dinheiro`sum(troco) = Dinheiro`sum(inserido) - (car.zona.preco * qua)
		  and maq.status = <Delivering> 
	);
	
	-- Cancela a compra de um novo titulo Andante
	public CancelarCompra: MaquinaAndante * Dinheiro`BagOfCoins ==> Dinheiro`BagOfCoins
	CancelarCompra(maq, coins) == (

		dcl stockInicialDinheiro : Dinheiro`BagOfCoins := maq.stockDinheiro;
		dcl inserido : nat := 0;
		dcl result : Dinheiro`BagOfCoins;
		
		for all c in set dom coins do
			for all - in set {1 , ..., coins(c)} do (
				maq.inserirDinheiro(c);
				inserido := inserido + c;
				assertEqual(inserido, maq.quantiaInserida)
     );      		
		maq.cancelar();    
		result := maq.apanharTroco();
    
		assertTrue(Dinheiro`addAll(stockInicialDinheiro, coins) = Dinheiro`addAll( maq.stockDinheiro, result));
			         
		return result
	)
	pre  maq.status = <Idle> 
	     and Dinheiro`sum(coins) > 0 
	post Dinheiro`sum(RESULT) = Dinheiro`sum(coins) 
			and maq.status = <Idle>;
	
	-- Muda a zona de um titulo Andante
	public MudarZona: MaquinaAndante * CartaoAndante * Zona==> CartaoAndante
	MudarZona(maq,cartao,zon) == (
		dcl result: CartaoAndante;
		maq.mudarZona(zon,cartao);
		result := maq.apanharAndante();
		assertTrue(zon.nome = result.zona.nome);
		assertTrue(0 = result.quantidade);
		return result
	)
	pre maq.status = <Idle>;
	
	-- Procedimento generico para testar a compra de um novo titulo Andante
	public testarCompraCartao: () ==> ()
	testarCompraCartao() == (
		dcl maquina: MaquinaAndante := ConfigurarMaquina("password");
		CarregarMaquina(maquina, "password", {1 |-> 5, 2 |-> 5,5 |-> 5, 10 |-> 5, 20 |-> 5, 50 |-> 5,100 |-> 5,200 |-> 5},5,5);
		
		let mk_(-, troco, -) = ComprarAndanteRecibo(maquina, maquina.z2, 1, {200 |-> 1}) in
  			assertEqual({ 20 |-> 1}, troco)
	);
	
	-- Procedimento generico para testar o carregamento de um titulo Andante
	public testarCarregarCartao: () ==> ()
	testarCarregarCartao() == (
		dcl maquina: MaquinaAndante := ConfigurarMaquina("password");
		dcl cartao: CartaoAndante := new CartaoAndante(2,maquina.z2);
		CarregarMaquina(maquina, "password", {1 |-> 5, 2 |-> 5,5 |-> 5, 10 |-> 5, 20 |-> 5, 50 |-> 5,100 |-> 5,200 |-> 5},5,5);
		
		let mk_(-, troco, -) = CarregarAndanteRecibo(maquina, 1, {100 |-> 1, 200 |-> 1}, cartao) in
  			assertEqual({10 |-> 1, 20 |-> 1, 50 |-> 1, 100 |-> 1}, troco)
	);
	
	-- Procedimento generico para testar o cancelamento de uma compra/carregamento
	public testarCancelar: () ==> ()
	testarCancelar() == (
		let maquina = ConfigurarMaquina("password"),
				coins = {100 |-> 1, 200 |-> 1}
		in (
		  CarregarMaquina(maquina, "password", {1 |-> 5, 2 |-> 5,5 |-> 5, 10 |-> 5, 20 |-> 5, 50 |-> 5,100 |-> 5,200 |-> 5},5,5);
		  assertEqual(coins,  CancelarCompra(maquina, coins))
		)
	);
	
	-- Procedimento generico para testar mudanca de zona de titulo Andante
	public testarMudarZona: () ==> ()
	testarMudarZona() == (
		dcl maquina: MaquinaAndante := ConfigurarMaquina("password");
		dcl cartao: CartaoAndante := new CartaoAndante(2,maquina.z2);
		dcl zona: Zona := maquina.z5;
		dcl cartaoNovo: CartaoAndante := MudarZona(maquina,cartao,zona);
		assertEqual(zona.nome, cartaoNovo.zona.nome);
	);
	
	-- Main 
	public main: () ==> ()
 	main() == (
  		testarCompraCartao();
  		testarCarregarCartao();
  		testarCancelar();
  		testarMudarZona();
  );


end TestMaquinaAndante


